name: Lint
on:
  push:
    branches: [main]
    paths-ignore:
      - 'LICENSE'
      - '.vscode'
  pull_request:
    paths-ignore:
      - 'LICENSE'
      - '.vscode'
jobs:
  asdf-parser:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
      - uses: kachick/action-parse-asdf-tool-versions@v1
        id: parse
    outputs:
      tool-versions: '${{ steps.parse.outputs.json }}'
  dprint:
    needs: [asdf-parser]
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dprint/check@v2.1
        with:
          dprint-version: '${{ fromJson(needs.asdf-parser.outputs.tool-versions).dprint }}'
  definitions:
    needs: [asdf-parser]
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache CLI
        id: cache
        uses: actions/cache@v3
        with:
          path: ./bin/cli
          key: cli-${{ runner.os }}-crystal_${{ fromJson(needs.asdf-parser.outputs.tool-versions).crystal }}-${{ hashFiles('src/**', 'shards.yml', 'shards/lock') }}
      - uses: crystal-lang/install-crystal@v1
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          crystal: '${{ fromJson(needs.asdf-parser.outputs.tool-versions).crystal }}'
      - run: shards install --production
        if: steps.cache.outputs.cache-hit != 'true'
      - run: make build-tools
        if: steps.cache.outputs.cache-hit != 'true'
      - run: make lint-definitions
